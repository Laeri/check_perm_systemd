#!/usr/bin/env python3

import os
import re
import collections

# systemd service files end with '.service' and are located in the folder
# /etc/systemd/system
def get_services():
    system_path = "/etc/systemd/system"
    service_files = []
    for current, subdirs, files in os.walk(system_path):
        for file in files:
            if file.endswith(".service"):
                service_files.append(os.path.join(current, file))
    return service_files


# extract script to be run and user with regex
# could also use a service file format parser if necessary
start_regex = re.compile("(?<=ExecStart=)([^ \n]*)")
start_pre_regex = re.compile("(?<=ExecStartPre=)([^ \n]*)")
reload_regex = re.compile("(?<=ExecReload=)([^ \n]*)")
stop_regex = re.compile("(?<=ExecStop=)([^ \n]*)")

exec_re = [start_pre_regex, start_regex, reload_regex, stop_regex]

user_regex = re.compile("(?<=User=)([^ \n]*)")

# collect for every service scripts run in ExecStart=, ExecStop=, ... description
services = collections.defaultdict(list)
for service in get_services():
    with open(service, 'r') as f:
        file_content = f.read()
        for reg in exec_re:
            for m in re.finditer(reg, file_content):
                file_name = m.group()
                # systemd paths can have several prefixes
                # '-' means if the file is not found, no error warning or message is logged
                if file_name.startswith("-"):
                    file_name = file_name[1:]
                # in case there are other wildcards we don't know about
                if os.path.exists(file_name):
                    services[f].append(file_name)
                else:
                    print(f"file: {file_name} does not exist")

problematic_scripts = []

mask_read = 0x4
mask_write = 0x2
mask_execute = 0x1

def get_perm_octal_str(file):
    return oct(os.stat(file).st_mode)[-3:]


for service, scripts in services.items():
    for script in scripts:
        st = os.stat(script)
        mode = oct(st.st_mode)[-3:]
        user_perm = int(mode[0])
        group_perm = int(mode[1])
        all_perm = int(mode[2])
        # it is not the root user and has write permission
        if st.st_uid != 0 and user_perm & mask_write == mask_write:
            problematic_scripts.append(script)
        elif st.st_uid == 0:
            if all_perm & mask_write == mask_write:
                problematic_scripts.append(script)

print("problematic scripts: ")
for script in problematic_scripts:
    print(script)
